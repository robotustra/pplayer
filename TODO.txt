What must to be done.


Интерпретатор должен перевести запись в некий универсальный язык, над которым он может производить вычисления.

(1) Итак, первая стадия это выделение слов и определение их смысла как слов.
Это первый слой сканирования.

Если не известны вводимые слова, то по написанию они должны пройти через ряд правил, прежде чем интерпретатор скажет, что он про них думает.

Например, если есть правила определения числа, переменной, или еще чего, то они должны быть проверены.

После проверки, если все еще есть неизвестные слова и догадаться о их смысле невозможно, то проверяются опечатки в словах по расстоянию Левенштейна до 3.

Если и после этого не обнаружено сходство слов, то интерпретатор выдает ошибку.

(2) Если установлены все слова, между ними устанавливается зависимость, и строится дерево параметров, переменных и операций над ними.

Уже на этом уровне должно быть понятно как интерпретировать получившуюся структуру. Если же полученная структуры невычислима в силу неполноты данных, то уже на этом уровне определяется чего не достает и вопрос отсылается на первый уровень, где он передается человеку.

То есть по сути дела это перевернутая работа неокортекса.

То есть у нас должен быть плеер и парсер для двух слоев.
А то и трех.

Так и будем называть их

PlayerL3, ParserL3
PlayerL2, ParserL2
PlayerL1, ParserL1.

Player3 интерпретирует ввод как написано в пункте (1). И переводит его в язык второго уровня. Далее интерпретатор переводит его в язык первого уровня. Далее производятся вычисления и парсер результата переводит его обратно в язык более высокого уровня если это нужно. И передает наверх.

То есть мне нужно сделать:
(1) Понять какая должна быть форма языка второго уровня, придумать N примеров перевода из языка L3 в L2 и наоборот, и сформулировать алгоритмы для парсера и плэйера. Повторить то же самое для уровней L2 и L1.

допустим, мы можем делать подстановки типа:

("сколько будет" expr ) -> evaluate(expr)

(expr1 "+" expr2) -> try_add(expr1, expr2)

("пусть" expr) -> expr
("допустим" expr) -> expr

(expr1 "=" expr2) -> { if ( isVariable(expr1) && isValue(expr2) ) {expr = evaluate(expr2); } 
						else {/* можем определить другой смысл для знака = */} }

В принципе, для описания арифметических вычислений язык второго уровня может оказаться вполне каким-либо языком программирования. И хорошо, если этот язык будет интерпретируемым.

Короче нужно придумать правила для интепретации вводимых слов и составить список этих самых вводимых слов.

Составляем список слов:

========================================================================================================
пусть, сумма, разность, произведение, переменная, значение, +, -, плюс, минус, *, умножить, /, разделить
сколько будет, вычислить, [a..z,A..Z,А..Я,а..Я], величина, массив, матрица, список, размерность,
функция, ответ.
========================================================================================================

Если будут определяться какие-то другие слова, то следует будет ввести парсер и плеер более высокого 
уровня.

По идее все слова должны будут определяться через слой самого низкого уровня по любому. Эти определения нужно будет переводить в слои более низкого уровня.



Слово определено, если заданы все его степени свободы. То есть хочешь не хочешь, а писать слой мне 
придется. Проект pplayer.


------------------------------

1) Разделить входной поток на слова и найти их в локальной базе данных. 
Подгрузить определения слов. 
Локальная база данных это просто один файл, содержащий символы и их определения.

	Формат базы очень простой:
	
	хедер символа, 
	символ, 
	футер стмвола, 
	хедер описания 1, 
	описание, 
	футер описания 1, 
	[{хедер описания 2, описание, футер описания 2,] 



1.1) Разбить слова на группы, в соответствии с коротыми они должны быть интерпретированы, и на последовательности групп интерпретации.

Различаемые последовательности типов объектов и способ их интерпретации, должен быть в базе так же.

	
	хедер сочетания объектов,  
	имя объекта1, 
	имя объекта2, 
	...., 
	футер сочетания объектов,
	херер перевода, 
	символ1, 
	символ2, 
	символ3, 
	.... , 
	футер перевода.



Следует различать объекты и символы. Символы не имеют описания и просто используются для описания объектов.
Объект должен иметь в себе хотя бы одно описание, состоящее из символов и других объектов.
Символ - это объект без описания.

Так же должны быть 

	динамические объекты, 

которые распознаются автоматически и не хранятся в базе данных, и передаются ниже или выше без изменения. Их имя и есть описание. Динамических объекты опознаются, но не интерпретируются, а передаются "as is".


например, имеем предложение:

32.34 + 4342

должен распознаться как 
	
	динамический объект число 1,
	прибавить,
	динамический объект число 2.

и должен быть проинтерпретирован как
	
	plus( 32.34, 4342)





2) Проинтерпретировать входной поток в соответствии с определениями.

3) Сделать механизм добавления новых слов. В парсер и в плэйер.

=====================================================================
31.12.2013
----------

Синтаксис и грамматика предложений для парсера-плеера.

Ввод информации должен отсуществляться на языке близком к обычному, с обычными знаками препинания, математические знаки и символы, цифры и скобки должны интерпретироваться обычным образом.

Разбор предложения должен начинаться с блоков. Первая буква должна быть заглавной, даже если это не так, то она делается заглавной. Каждый ввод рассматривается как одно предложение. Предложения могут быть повелительные, повествовательные, вопросительные.

1) Повествовательные предложения - это ввод параметров, задание начальных условий.

В повествовательных преложениях основными словами будет:
------------------------------------
	пусть, допустим, что, равно, равняется, величина,

	примеры:
	--------
	Пусть Х равно 5.
	Допустим, что Z = 10, а t=0.01.
	Предположим, что Н = 20 и S = 15.
	Считаем A=5, P=10, D=18.


2) Повелительные предложения - это выполнение определенных функций.
	
	Напечатай "Hello World".
	Найти расстояние между точками A и B.
	Высилить корень квадратный из C.
	Найти площадь треугольника ABC.


3) Вопросительные - выем значений из памяти.

	Чему равен X?
	Чему равно В?
	Какова длинна стороны AB?

4) Cмешанные предложения. Вопросительные + повествовательные.

	Сколько будет G/D если G=10, а D = 4?

Так же должен быть способ задания инструкции и выполение инструкции по шагам. Например, описание вычисления расстояния:

	Расстояние между точками A с координатой (x,y) и В с координатами (x1,y1) вычисляется 
	по формуле D = ( (x1-x)^2 + (y1-y)^2 ) ^ (1/2).

И после такого ввода должно быть понятен вопрос типа: 

	Чему равно расстояние между точками (2,4) и (4,5)?

или 

	Пусть T =  расстоянию между точками (2,6) и (4,3).

Это смесь повествовательного и повелителььного преложения. То есть интерпретатор должен уметь переформулировать предложение и разбить его на стандартизированные простые предложения.

	"Пусть T =  расстоянию между точками (2,6) и (4,3)."

Должно быть переформулировано так:

	"Пусть есть точка Имя1(2,6) и точка Имя2(4,3). 
	Вычислить расстояние между точками Имя1 и Имя2, сохранить значение в T."

------------------------------------------------------------------------------------
То есть первый этап разбора предложения - перевод его в стандартизированную форму. Или нормализация.
Назовем это единичным преобразованием смысла.

Начнем с задания параметров. Это будут повествовательные предложения.












